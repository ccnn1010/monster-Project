{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uVAIaA,G,MAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,2BACrB,gCAAOL,EAAMI,QAAQE,KAArB,KACA,+BAAMN,EAAMI,QAAQG,MAApB,QCHIC,G,MAAW,SAAAR,GAAK,OACzB,yBAAKC,UAAY,aACZD,EAAMI,QAAQK,KAAI,SAAAL,GAAO,OAC1B,kBAAC,EAAD,CAAMM,IAAMN,EAAQC,GAAID,QAASA,UCL5BO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACIZ,UAAU,SACVa,KAAK,SACLF,YAAeA,EACfG,SAAYF,MCwDLG,G,wDAzDb,aAAc,IAAD,8BACX,gBAuBJH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAtBpC,EAAKC,MAAQ,CAEXlB,QAAS,GACTe,YAAa,IANJ,E,gEAkBK,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEd,QAASuB,S,+BAY9B,IAAD,EAE0BC,KAAKN,MAA9BlB,EAFD,EAECA,QAASe,EAFV,EAEUA,YACXU,EAAkBzB,EAAQ0B,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAOlG,OACE,yBAAK9B,UAAU,OACf,kDACA,kBAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUT,QAASyB,S,GAnDPI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79315912.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${ props.monster.id}?set=set2&size180x180`} />\r\n         <h2> { props.monster.name } </h2>\r\n         <p> { props.monster.email } </p>\r\n    </div>\r\n);\r\n\r\n\r\n/* ?set=set2&size180x180  this is a url parameter */","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\n\r\nexport const CardList = props => (\r\n    <div className = 'card-list'>\r\n        {props.monster.map(monster => (\r\n        <Card key= {monster.id} monster={monster} />\r\n        ))}\r\n    </div>\r\n\r\n);\r\n    \r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder= { placeholder }\r\n        onChange= { handleChange }\r\n      />\r\n\r\n);\r\n\r\n\r\n\r\n//functional component is just a component that gets some props and returns html. Easy to test and use","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n   \n      monster: [],\n      searchField: ''\n  };\n\n  /* this.handleChange = this.handleChange.bind(this); */\n\n}\n\n//.bind() is a method on any function that returns a new function where the contect of 'this' is set to what ever you pass to it. In this case the this key word is defined in the constructor by : this.handleChange = this.handleChange.bind(this);\n\n\n\n/* CompountDidMount is used because of our class component,  We are fetch from URL, taking a response and converting to JSON format so that JAvascript can understand use, take the users and set monsters to that array of users returns a promise */\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({ monster: users }));\n}\n\nhandleChange = (e) => {\n  this.setState({ searchField: e.target.value });\n}\n\n//\n\n//you can use an error function to create an automatic bind of the context to the constructor. It saves doing an extra step.\n\n\n  render() {\n\n    const { monster, searchField } = this.state;\n    const filteredMonster = monster.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    //toLowerCase makes it not case sensitive\n    //.filter()\n    //.includes() checks whether string value passing inside the includes is actually in the string being called on \n\n    return (\n      <div className=\"App\">\n      <h1> Monsters Rolodex </h1>\n      <SearchBox\n        placeholder='search monsters'\n        handleChange={this.handleChange}\n      />\n      <CardList monster={filteredMonster} /> \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n\n\n\n/* \n\n1) You need to display a list of monsters.  to do this create a new property called monsters which have an array with a string value of each monster. \n\n2) Between curly braces you can render any JS render in this  case the h1's with the monsters name.\nmap() returns the return of whatever function you pass to it iterated over every element within the array in the state.abs\n\n3) An id is needed for each property in the state so that react can identify which one to render. To make this work the html tag e.g. h1 needs to have a key e.e.  <h1 key={monster.id}> This way it knows it doesn't have to render everything.\n\nA good rule of thumb as to when to use the key attribute you saw in the previous video, is this: Anytime you use the map() function inside of render, or you have a list of the same jsx elements one after another, they need a key attribute (and CRA will warn you about it if you miss it)\n\n\n4) lifecycle methods - They are methods that get called at different stages at when the component gets rendered. The main one to focus on is compounentDidMount. \n\nComponentDidMount - is used when making an api request.\n\n*/\n\n\n/* -----onChange----- */\n/* onChange={e => console.log(e.target.value)}/> \n\nonChange fires with the synthetic event (event in browser) when the input is changed by the user adding input.  The e represents the synthetic event. \n\n\nthe target gets you the html element this is because it is the html element that fired the event. Value is a property on the input that gives the string value. This is how it can be stored on the state. \n\n\n\n*/\n\n\n //filter monsters when their names don't match the field.  We can make a new array using the .filter() method. Destructuring allows us to pull properties off of an object and set them to const that you put inside {} curly brackets.","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}